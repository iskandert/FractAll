/**
 * CLI –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ L-—Å–∏—Å—Ç–µ–º—ã (MVP –≠—Ç–∞–ø 1)
 *
 * –ó–∞–ø—É—Å–∫: npm run dev:cli
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ generatePattern –∏ patternToCommands
 * - –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
 */

import { generatePattern, patternToCommands, commandsToString, CommandFactory } from './features/l-system/domain/core';
import { Command } from './features/l-system/domain/types';

/**
 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ L-—Å–∏—Å—Ç–µ–º—ã:
 * - 'F', 'G': –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥ (move)
 * - '+': –ø–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ (turn —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —É–≥–ª–æ–º)
 * - '-': –ø–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ (turn —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —É–≥–ª–æ–º)
 * - '[': —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (push)
 * - ']': –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (pop)
 */
const DEFAULT_SYMBOL_MAP: Record<string, Command> = {
    'F': CommandFactory.move(10),
    'G': CommandFactory.draw(10),
    '+': CommandFactory.turn(90),
    '-': CommandFactory.turn(-90),
    '[': CommandFactory.push(),
    ']': CommandFactory.pop(),
};

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è L-—Å–∏—Å—Ç–µ–º—ã: –ö—Ä–∏–≤–∞—è –ö–æ—Ö–∞
 */
function testKochCurve() {
    console.log('=== –¢–µ—Å—Ç: –ö—Ä–∏–≤–∞—è –ö–æ—Ö–∞ ===\n');

    try {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        const patternResult = generatePattern({
            axiom: 'F',
            replacementRules: { 'F': 'F+F-F-F+F' },
            iterations: 2,
        });

        console.log('–ê–∫—Å–∏–æ–º–∞: F');
        console.log('–ü—Ä–∞–≤–∏–ª–∞: F ‚Üí F+F-F-F+F');
        console.log('–ò—Ç–µ—Ä–∞—Ü–∏–∏: 2');
        console.log(`–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: ${patternResult.pattern}`);
        console.log(`–î–ª–∏–Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: ${patternResult.pattern.length} —Å–∏–º–≤–æ–ª–æ–≤\n`);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã
        const commands = patternToCommands({
            pattern: patternResult.pattern,
            commands: DEFAULT_SYMBOL_MAP,
        });

        console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥: ${commands.length}`);
        console.log('–ü–µ—Ä–≤—ã–µ 10 –∫–æ–º–∞–Ω–¥:');
        console.log(commandsToString(commands.slice(0, 10)));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error instanceof Error ? error.message : error);
    }
}

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è L-—Å–∏—Å—Ç–µ–º—ã: –î–µ—Ä–µ–≤–æ
 */
function testTree() {
    console.log('\n\n=== –¢–µ—Å—Ç: –§—Ä–∞–∫—Ç–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ ===\n');

    try {
        const patternResult = generatePattern({
            axiom: 'F',
            replacementRules: { 'F': 'F[+F]F[-F]F' },
            iterations: 3,
        });

        console.log('–ê–∫—Å–∏–æ–º–∞: F');
        console.log('–ü—Ä–∞–≤–∏–ª–∞: F ‚Üí F[+F]F[-F]F');
        console.log('–ò—Ç–µ—Ä–∞—Ü–∏–∏: 3');
        console.log(`–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω (–Ω–∞—á–∞–ª–æ): ${patternResult.pattern.substring(0, 50)}...`);
        console.log(`–î–ª–∏–Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: ${patternResult.pattern.length} —Å–∏–º–≤–æ–ª–æ–≤\n`);

        const commands = patternToCommands({
            pattern: patternResult.pattern,
            commands: DEFAULT_SYMBOL_MAP,
        });

        console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥: ${commands.length}`);
        console.log('–ü–µ—Ä–≤—ã–µ 10 –∫–æ–º–∞–Ω–¥:');
        console.log(commandsToString(commands.slice(0, 10)));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error instanceof Error ? error.message : error);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë   L-System Generator CLI (–≠—Ç–∞–ø 1)   ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

testKochCurve();
testTree();

console.log('\n\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.');
console.log('üí° –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ domain/core –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n');
